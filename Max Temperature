package com.hadoop.mapreduce;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;




public class MaxTemperature {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException
	{
	
		//create conf object
		
		Configuration conf = new Configuration();
		
		//parsing user command line arguments by ignoring hadoop generic options...
		String UserArgs[] = new GenericOptionsParser(conf, args).getRemainingArgs();
		
		//create job object...
		
		Job myjob = new Job(conf, "word count");
		
		//Setting class info to job object
		myjob.setJarByClass(MaxTemperature.class);
		myjob.setMapperClass(MaxTemperatureMapper.class);
		myjob.setReducerClass(MaxTemperatureReducer.class);
		myjob.setCombinerClass(MaxTemperatureReducer.class);

		
		//myjob.setInputFormatClass(KeyValueTextInputFormat.class);
		myjob.setOutputKeyClass(Text.class);
		myjob.setOutputValueClass(IntWritable.class);
	    
	    myjob.setInputFormatClass(TextInputFormat.class);
		
		//set the input and output
		FileInputFormat.addInputPath(myjob, new Path(UserArgs[0]));
		FileOutputFormat.setOutputPath(myjob, new Path(UserArgs[1]));
		
		//submit the job
		System.exit(myjob.waitForCompletion(true)? 0 : 1);
		
	}
	
	public static  class MaxTemperatureMapper 
	   extends Mapper<LongWritable,Text,Text,IntWritable>
	{
	private static final int MISSING=9999;

	public void map(LongWritable key, Text value, Context context)
	 throws IOException, InterruptedException
	 {
		String line = value.toString();
		String year = line.substring(15,19);
		int airTemperature;
		if (line.charAt(87) == '+')
			airTemperature = Integer.parseInt(line.substring(88,92));
		else
			airTemperature = Integer.parseInt(line.substring(87,92));
		String quality = line.substring(92,93);
		if (airTemperature != MISSING && quality.matches("[01459]"))
		{
			context.write(new Text(year),new IntWritable(airTemperature));
		}
	 }
	}
	
	public static class MaxTemperatureReducer 
	 extends Reducer<Text,IntWritable,Text,IntWritable>
	{
		public void reduce(Text key, Iterable<IntWritable> values, Context context )
		throws IOException, InterruptedException
		{
			int maxValue = Integer.MIN_VALUE;
			for (IntWritable value:values)
			{
				maxValue = Math.max(maxValue,value.get());
			}
			context.write(key, new IntWritable(maxValue));
		}

	}


}
