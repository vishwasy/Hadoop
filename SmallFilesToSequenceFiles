package com.hadoop.mapreduce;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;




public class SmallFilesToSequenceFiles {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException
	{
	
		//create conf object
		
		Configuration conf = new Configuration();
		
		//parsing user command line arguments by ignoring hadoop generic options...
		String UserArgs[] = new GenericOptionsParser(conf, args).getRemainingArgs();
		
		//create job object...
		
		Job myjob = new Job(conf, "word count");
		
		//Setting class info to job object
		myjob.setJarByClass(SmallFilesToSequenceFiles.class);
		myjob.setMapperClass(SequenceFileMapper.class);

		//myjob.setInputFormatClass(KeyValueTextInputFormat.class);
		myjob.setOutputKeyClass(Text.class);
		myjob.setOutputValueClass(BytesWritable.class);
	    
	    myjob.setInputFormatClass(WholeFileInputFormat.class);
		myjob.setOutputFormatClass(SequenceFileOutputFormat.class);
		//set the input and output
		FileInputFormat.addInputPath(myjob, new Path(UserArgs[0]));
		FileOutputFormat.setOutputPath(myjob, new Path(UserArgs[1]));
		
		//submit the job
		System.exit(myjob.waitForCompletion(true)? 0 : 1);
		
	}
	
	public static  class SequenceFileMapper
	   extends Mapper<NullWritable,BytesWritable,Text, BytesWritable>
	{
    private Text filenamekey;
	protected void setup(Context context) throws IOException, InterruptedException
	{
		InputSplit split = context.getInputSplit();
		Path path = ((FileSplit) split).getPath();
		filenamekey = new Text(path.toString());
	}
	
	public void map(NullWritable key, BytesWritable value, Context context)
	 throws IOException, InterruptedException
	 {
		context.write(filenamekey, value);
	 }
	}
}
