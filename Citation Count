package com.hadoop.mapreduce;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer;
import org.apache.hadoop.util.GenericOptionsParser;


public class Citationcount {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException
	{
	
		//create conf object
		
		Configuration conf = new Configuration();
		
		//parsing user command line arguments by ignoring hadoop generic options...
		String UserArgs[] = new GenericOptionsParser(conf, args).getRemainingArgs();
		
		//create job object...
		
		Job myjob = new Job(conf, "word count");
		
		//Setting class info to job object
		myjob.setJarByClass(Citationcount.class);
		myjob.setMapperClass(MyMapper.class);
		myjob.setCombinerClass(IntSumReducer.class);
		myjob.setReducerClass(IntSumReducer.class);
		
		//myjob.setInputFormatClass(KeyValueTextInputFormat.class);
	    myjob.setOutputKeyClass(IntWritable.class);
	    myjob.setOutputValueClass(IntWritable.class);
	    
	    myjob.setInputFormatClass(KeyValueTextInputFormat.class);
		
		//set the input and output
		FileInputFormat.addInputPath(myjob, new Path(UserArgs[0]));
		FileOutputFormat.setOutputPath(myjob, new Path(UserArgs[1]));
		
		//submit the job
		System.exit(myjob.waitForCompletion(true)? 0 : 1);
	}
	
	public static class MyMapper extends Mapper<Text, Text, IntWritable, IntWritable>
	{
		private IntWritable emitkey = new IntWritable();
		private static final IntWritable emitvalue = new IntWritable(1);
		public void map(Text key, Text value, Context context) throws IOException,InterruptedException
		{	String citation = value.toString();
		    if (citation.matches("^[0-9][0-9]*[0-9]$"))
		    {
		    	emitkey.set(Integer.parseInt(citation));
		    	context.write(emitkey,emitvalue);
		    }
		} 
		
	}
}
